// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.4.0.0
//      SpecFlow Generator Version:2.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SFA.DAS.EmployerFinance.AcceptanceTests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Expired-funds")]
    public partial class Expired_FundsFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Expired-funds.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Expired-funds", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Levy declarations, no expired levy declarations, no adjustment levy declarations," +
            " no payments, no refund payments, no transfer payments")]
        public virtual void LevyDeclarationsNoExpiredLevyDeclarationsNoAdjustmentLevyDeclarationsNoPaymentsNoRefundPaymentsNoTransferPayments()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Levy declarations, no expired levy declarations, no adjustment levy declarations," +
                    " no payments, no refund payments, no transfer payments", null, ((string[])(null)));
#line 3
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
 testRunner.Given("We have an account with a paye scheme", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "TransactionType",
                        "Amount",
                        "DateCreated"});
            table1.AddRow(new string[] {
                        "Declaration",
                        "1000",
                        "2018-04-23"});
            table1.AddRow(new string[] {
                        "Declaration",
                        "1000",
                        "2018-05-23"});
            table1.AddRow(new string[] {
                        "Declaration",
                        "1000",
                        "2018-06-23"});
            table1.AddRow(new string[] {
                        "Declaration",
                        "1000",
                        "2018-07-23"});
            table1.AddRow(new string[] {
                        "Declaration",
                        "1000",
                        "2018-08-23"});
            table1.AddRow(new string[] {
                        "Declaration",
                        "1000",
                        "2018-09-23"});
            table1.AddRow(new string[] {
                        "Declaration",
                        "1000",
                        "2018-10-23"});
            table1.AddRow(new string[] {
                        "Declaration",
                        "1000",
                        "2018-11-23"});
            table1.AddRow(new string[] {
                        "Declaration",
                        "1000",
                        "2018-12-23"});
            table1.AddRow(new string[] {
                        "Declaration",
                        "1000",
                        "2019-01-23"});
            table1.AddRow(new string[] {
                        "Declaration",
                        "1000",
                        "2019-02-23"});
            table1.AddRow(new string[] {
                        "Declaration",
                        "1000",
                        "2019-03-23"});
            table1.AddRow(new string[] {
                        "Declaration",
                        "1000",
                        "2019-04-23"});
#line 5
 testRunner.And("the account has transactions", ((string)(null)), table1, "And ");
#line 20
 testRunner.When("the expire funds process runs on 2019-04-28 with a 12 month expiry period", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 21
 testRunner.Then("we should see a level 1 screen with a balance of 12000 on the 04/2019", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 22
 testRunner.And("we should see a level 1 screen with expired levy of -1000 on the 04/2019", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Levy declarations, expired levy declarations, adjustment levy declarations, payme" +
            "nts, refund payments, transfer payments")]
        public virtual void LevyDeclarationsExpiredLevyDeclarationsAdjustmentLevyDeclarationsPaymentsRefundPaymentsTransferPayments()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Levy declarations, expired levy declarations, adjustment levy declarations, payme" +
                    "nts, refund payments, transfer payments", null, ((string[])(null)));
#line 24
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 25
 testRunner.Given("We have an account with a paye scheme", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "TransactionType",
                        "Amount",
                        "DateCreated"});
            table2.AddRow(new string[] {
                        "Declaration",
                        "1000",
                        "2018-04-23"});
            table2.AddRow(new string[] {
                        "Payment",
                        "-10",
                        "2018-05-05"});
            table2.AddRow(new string[] {
                        "Declaration",
                        "-100",
                        "2018-05-23"});
            table2.AddRow(new string[] {
                        "Payment",
                        "-10",
                        "2018-06-05"});
            table2.AddRow(new string[] {
                        "Declaration",
                        "1000",
                        "2018-06-23"});
            table2.AddRow(new string[] {
                        "Payment",
                        "-10",
                        "2018-07-05"});
            table2.AddRow(new string[] {
                        "Transfer",
                        "-2",
                        "2018-07-05"});
            table2.AddRow(new string[] {
                        "Declaration",
                        "1000",
                        "2018-07-23"});
            table2.AddRow(new string[] {
                        "Payment",
                        "-10",
                        "2018-08-05"});
            table2.AddRow(new string[] {
                        "Transfer",
                        "-2",
                        "2018-08-05"});
            table2.AddRow(new string[] {
                        "Declaration",
                        "1000",
                        "2018-08-23"});
            table2.AddRow(new string[] {
                        "Payment",
                        "-10",
                        "2018-09-05"});
            table2.AddRow(new string[] {
                        "Transfer",
                        "-2",
                        "2018-09-05"});
            table2.AddRow(new string[] {
                        "Declaration",
                        "1000",
                        "2018-09-23"});
            table2.AddRow(new string[] {
                        "Payment",
                        "-10",
                        "2018-10-05"});
            table2.AddRow(new string[] {
                        "Transfer",
                        "-2",
                        "2018-10-05"});
            table2.AddRow(new string[] {
                        "Declaration",
                        "1000",
                        "2018-10-23"});
            table2.AddRow(new string[] {
                        "Payment",
                        "-10",
                        "2018-11-05"});
            table2.AddRow(new string[] {
                        "Transfer",
                        "-2",
                        "2018-11-05"});
            table2.AddRow(new string[] {
                        "Declaration",
                        "1000",
                        "2018-11-23"});
            table2.AddRow(new string[] {
                        "Payment",
                        "-10",
                        "2018-12-05"});
            table2.AddRow(new string[] {
                        "Transfer",
                        "-2",
                        "2018-12-05"});
            table2.AddRow(new string[] {
                        "Declaration",
                        "1000",
                        "2018-12-23"});
            table2.AddRow(new string[] {
                        "Payment",
                        "-10",
                        "2019-01-05"});
            table2.AddRow(new string[] {
                        "Transfer",
                        "-2",
                        "2019-01-05"});
            table2.AddRow(new string[] {
                        "Declaration",
                        "1000",
                        "2019-01-23"});
            table2.AddRow(new string[] {
                        "Payment",
                        "-10",
                        "2019-02-05"});
            table2.AddRow(new string[] {
                        "Transfer",
                        "-2",
                        "2019-02-05"});
            table2.AddRow(new string[] {
                        "Declaration",
                        "-100",
                        "2019-02-23"});
            table2.AddRow(new string[] {
                        "Payment",
                        "-10",
                        "2019-03-05"});
            table2.AddRow(new string[] {
                        "Transfer",
                        "-2",
                        "2019-03-05"});
            table2.AddRow(new string[] {
                        "Declaration",
                        "1000",
                        "2019-03-23"});
            table2.AddRow(new string[] {
                        "Payment",
                        "10",
                        "2019-04-05"});
            table2.AddRow(new string[] {
                        "Transfer",
                        "-2",
                        "2019-04-05"});
            table2.AddRow(new string[] {
                        "ExpiredFund",
                        "-880",
                        "2019-03-28"});
            table2.AddRow(new string[] {
                        "Declaration",
                        "1000",
                        "2019-04-23"});
#line 26
 testRunner.And("the account has transactions", ((string)(null)), table2, "And ");
#line 64
 testRunner.When("the expire funds process runs on 2019-04-28 with a 12 month expiry period", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 65
 testRunner.Then("we should see a level 1 screen with a balance of 8900 on the 04/2019", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 66
 testRunner.And("we should see a level 1 screen with expired levy of -888 on the 04/2019", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion

